#include "ast.h"

static void noop() {}

static void fixme() {
  printf("FIXME called\n");
}

void ExpressionStringChunk__print(ExpressionStringChunk *x) {
  if (x->type == T_Literal) printf("%s", x->text);
  if (x->type == T_Subcall) fixme();
  if (x->type == T_Sequence) printf("%2s", x->sequence);
}

void ExpressionStringChunk__debug(ExpressionStringChunk *x) {
  printf(
    "{\"struct\":\"%s\",\"type\":\"%s\",\"child\":",
    "ExpressionStringChunk",
    type_str
    );
  if (x->type == T_Literal) printf("\"%s\"", x->text);
  if (x->type == T_Subcall) fixme();
  if (x->type == T_Sequence) printf("\"%2s\"", x->sequence);
  printf("}");
}

ExpressionStringChunk *ExpressionStringChunk__read(ExpressionChunkType mode) {

}

void ExpressionStringChunk__free(ExpressionStringChunk *x) {
  if (x->type == T_Literal) free(x->text);
  if (x->type == T_Subcall) fixme();
  if (x->type == T_Sequence) noop();
  free(x);
}
